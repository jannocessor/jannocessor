/**
 * Copyright 2011 Nikolche Mihajlovski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package $packageName;

#smart_import()
#if($model.interfaces.size() > 0)
#set($extends = $packageName + "." + $model.interfaces[0].asElement.name.appendPart("Proxy"))
#end
#set($data = "org.jannocessor.data." + $model.name.appendPart("Data"))

@#type("javax.annotation.Generated")("JAnnocessor-bootstraped")
public class $className#if($extends) extends #type(${extends})#end implements #type(${model.qualifiedName}) {

#if($model.methods.size() == 0)
    @SuppressWarnings("unused")
#end
    private $model.name adapter;

#if($model.methods.size() == 0)
    @SuppressWarnings("unused")
#end
    private #type($data) data;

    public $className($model.name adapter, ${model.name}Data data) {
#if($extends)
        super(adapter, data);
#end
        this.adapter = adapter;
        this.data = data;
    }

#foreach ($m in $model.methods)
	private boolean ${m.name}Initialized = false;

#end

#foreach ($m in $model.methods)
    public #type($m.returnType) ${m.name}() {
        if (!${m.name}Initialized) {
            data.${m.name.replacePart(0, "set")}(adapter.${m.name}());
			${m.name}Initialized = true;
        }

        return data.${m.name}();
    }

#end
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof #type(${model.qualifiedName}))) {
			return false;
		}

		#type(${model.qualifiedName}) other = (#type(${model.qualifiedName})) obj;
		return new #type("org.apache.commons.lang.builder.EqualsBuilder")()
#if ($extends)
				.appendSuper(super.equals(other))
#end
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
				.append(this.${m.name}(), other.${m.name}())
#end
#end
				.isEquals();
	}

	@Override
	public int hashCode() {
		return new #type("org.apache.commons.lang.builder.HashCodeBuilder")()
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
				.append(this.${m.name}())
#end
#end
				.toHashCode();
	}

	@Override
	public String toString() {
		#type("org.jannocessor.util.TypeSpecificStyle") style = new #type("org.jannocessor.util.TypeSpecificStyle")(#type(${model.qualifiedName}).class);
		#type("org.apache.commons.lang.builder.ToStringBuilder") builder = new #type("org.apache.commons.lang.builder.ToStringBuilder")(this, style);
		appendDescription(builder);
		return builder.toString();
	}

#if ($extends)
	@Override
#end
	protected void appendDescription(#type("org.apache.commons.lang.builder.ToStringBuilder") builder) {
#if ($extends)
        super.appendDescription(builder);
#end
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
        builder.append("${helper.fieldName($m)}", #type("org.jannocessor.util.ToStringUtil").describe(this.${m.name}()));
#end
#end
	}

}

#macro( smart_import )
(!PLACEHOLDER:SMART_IMPORT!)
#end

#macro( type $java_type )$types.useType($java_type)#end