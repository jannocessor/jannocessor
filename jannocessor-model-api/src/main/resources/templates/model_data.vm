/**
 * Copyright 2011 Nikolche Mihajlovski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package $packageName;

#smart_import()
#if($model.interfaces.size() > 0 && $model.interfaces[0].asElement.name != 'Serializable')
#set($extends = $packageName + "." + $model.interfaces[0].asElement.name.appendPart("Data"))
#end

@#type("javax.annotation.Generated")("JAnnocessor-bootstraped")
public class $className extends #if($extends)#type(${extends})#{else}AbstractData#end implements #type(${model.qualifiedName})#if($className == 'CodeNodeData'), #type('org.jannocessor.model.ParentedElement')#end {

	private static final long serialVersionUID = 1L;

#foreach ($m in $model.methods)
#if(!$helper.isCalculated($m))
    private #type($m.returnType) ${helper.fieldName($m)};

#end
#end

#foreach ($m in $model.methods)
#if(!$helper.isCalculated($m))
    public #type($m.returnType) ${m.name}() {
        return this.${helper.fieldName($m)};
    }

    public void ${m.name.replacePart(0, "set")}(#type($m.returnType) value) {
        this.${helper.fieldName($m)} = value;
    }

#else
    public #type($m.returnType) ${m.name}() {
        return #type('org.jannocessor.model.util.ModelUtils').${m.name}(this);
    }

#end
#end
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof #type(${model.qualifiedName}))) {
			return false;
		}

		#type(${model.qualifiedName}) other = (#type(${model.qualifiedName})) obj;
		return new #type("org.apache.commons.lang.builder.EqualsBuilder")()
#if ($extends)
				.appendSuper(super.equals(other))
#end
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
				.append(this.${m.name}(), other.${m.name}())
#end
#end
				.isEquals();
	}

	@Override
	public int hashCode() {
		return new #type("org.apache.commons.lang.builder.HashCodeBuilder")()
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
				.append(this.${m.name}())
#end
#end
				.toHashCode();
	}

	@Override
	public String toString() {
		#type("org.jannocessor.util.TypeSpecificStyle") style = new #type("org.jannocessor.util.TypeSpecificStyle")(#type(${model.qualifiedName}).class);
		#type("org.apache.commons.lang.builder.ToStringBuilder") builder = new #type("org.apache.commons.lang.builder.ToStringBuilder")(this, style);
		appendDescription(builder);
		return builder.toString();
	}

#if ($extends)
	@Override
#end
	protected void appendDescription(#type("org.apache.commons.lang.builder.ToStringBuilder") builder) {
#if ($extends)
        super.appendDescription(builder);
#end
#foreach ($m in $model.methods)
#if ($helper.isIdentityProperty($m))
        builder.append("${helper.fieldName($m)}", #type("org.jannocessor.model.util.ToStringUtil").describe(this.${m.name}()));
#end
#end
	}

	private void writeObject(#type('java.io.ObjectOutputStream') out) throws #type('java.io.IOException') {
		out.defaultWriteObject();
	}

	private void readObject(#type('java.io.ObjectInputStream') in) throws #type('java.io.IOException'),
			ClassNotFoundException {
		in.defaultReadObject();
	}

}

#macro( smart_import )
(!PLACEHOLDER:SMART_IMPORT!)
#end

#macro( type $java_type )$types.useType($java_type)#end
