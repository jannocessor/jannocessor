#macro(main)
#if($self)
#render($self)
#end
#end

#macro(info $msg)$helper.info($msg)#end
#macro(debug $msg)$helper.debug($msg)#end

#macro(smart_import)(!PLACEHOLDER:SMART_IMPORT!)#end

#macro(indentation)    #end

#macro(file_header)#end

#macro(type $java_type)$types.useType($java_type)#end

#macro(code $x $default $params)
#if(!$params)
#set($params='')
#end
#set($optionsVar = '$params')
#if($x.attributes)$helper.setAttributes($x.attributes)#end
#if($x.hardcoded)
$x.hardcoded#elseif($x.template)
#evaluate($x.template)
#elseif($x.templateName)
#parse("#locate($x.templateName)")
#elseif($x.macroName)
#evaluate("#${x.macroName}($optionsVar)")
#elseif($default)
$default#else
[ERROR: Can't render $x!]#end
#if($x.attributes)$helper.removeAttributes($x.attributes)#end
#end

#macro(render $model $options)
#set($self = $model)
#code($model.code, false, $options)#end

#macro(body $model $default $options)
#set($self = $model)
#code($model.body, $default, $options)#end

#macro(optional $value $default)
#if($value)
$value#else
$default#end
#end

#macro(default_body $method)
#if($method.returnType.simpleName.text != 'void')
return #optional($method.returnType.defaultValue, 'null');#end
#end

#macro(modifiers $model)
#foreach($mod in $model.modifiers.values)
$mod.toString().toLowerCase()#sep(" ")
#end
#end

#macro(modifiers_without $model $without)
#@trim()
#set($without_values = $without.values)
#foreach($mod in $model.modifiers.values)
#if(!$without_values.contains($mod))
$mod.toString().toLowerCase()#sep(" ")
#end
#end
#end
#end

#macro(sep $separator)
#if($foreach.hasNext)$separator#end
#end

#macro(inside)$!bodyContent#end

#macro(indent $level)
$helper.indent("#inside()", "#indentation")
#end

#macro(type_parameters $model)
#if($model.typeParameters && $model.typeParameters.size() > 0)
<#render_list($model.typeParameters)>#end
#end

#macro(parameters $model)
#render_list($model.parameters)
#end

#macro(trim)
#set($s = "#inside()")
$s.trim()#end

#macro(list $items $template $separator)
#foreach($it in $items)
#evaluate($template)#sep($separator)
#end
#end

#macro(map $map $template $separator)
#foreach($entry in $map.entrySet())
#evaluate($template)#sep($separator)
#end
#end

#macro(render_list $items $sep)
#if(!$sep)
#set($sep=", ")
#end
#foreach($item in $items)
#@trim()
#render($item)
#end#sep($sep)
#end
#end

#macro(render_lines $items)
#foreach($item in $items)
#render($item)

#end
#end

#macro(join $sep $items)
$helper.join($sep, $items)#end

#macro(help)
$helper.insight()#end

#macro(locate $tmpl)
$helper.locate($tmpl)#end

#macro(members $members_list $template)
#foreach ($m in $members_list)
#member($m, $template)
#end
#end

#macro(member $m $template)
#if($template)
#set($output = "#@trim()#evaluate($template)#end")
#else
#set($output = "#@trim()#render($m)#end")
#end
#if($output != '')
#@indent()
$output#end

#end
#end

#macro(nestedMembers $model)
#members($model.nestedClasses)
#members($model.nestedEnums)
#members($model.nestedInterfaces)
#members($model.nestedAnnotations)
#end

#macro(file $filename)
$helper.fileMark($filename)
#end

#macro(value $x)
$representer.getJavaRepresentation($x)#end

#macro(java_file $pkg $cls)
#set($package = $pkg.text.replaceAll('\.', '/'))
#file("${package}/${cls}.java")
#end

#macro(method_throws $model)
#if(!$model.thrownTypes.isEmpty())
throws #list($model.thrownTypes, '#type($it)', ', ')
#end
#end

#macro(java_header)
#java_file($self.parent.name, $self.name)
#file_header()
package $self.parent.name;

#smart_import()

#end

#macro(extends_class)
#if($self.superclass && $self.superclass.canonicalName != 'java.lang.Object')extends #type($self.superclass)#end
#end

#macro(implements_interfaces)
#if(!$self.interfaces.empty)implements #list($self.interfaces, '#type($it)', ', ')#end
#end

#macro(extends_interfaces)
#if(!$self.interfaces.empty)extends #list($self.interfaces, '#type($it)', ', ')#end
#end

#macro(java_element $kind $is_nested)
#before_element($is_nested)
#evaluate("#${kind}_begin()")
#before_members($is_nested)
#evaluate("#${kind}_content()")
#after_members($is_nested)
}#after_element($is_nested)#end

#macro(before_members $is_nested)


#end

#macro(after_members $is_nested)
#end

#macro(before_element $is_nested)
#if(!$is_nested)
#caption()
#end
#end

#macro(after_element $is_nested)#end

#macro(caption)
/**
 * Generated by JAnnocessor
 */
#end

#macro(info)
#file("${self.name}.info")
$self
#end

#macro(delegator)
#if($self.returnType.kind != 'VOID')return #end
${delegate.name}.${self.name}(#list($args, '$it', ', '));#end
